#include "dxcc.hh"
#include <QVector>
#include <QPair>
#include <QRegExp>
#include <QHash>

/* BUG:
 * */


static QVector< QPair<QRegExp, int> > _dxcc_table = {
  QPair<QRegExp, int>(QRegExp("A2[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 402),
  QPair<QRegExp, int>(QRegExp("A3[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 160),
  QPair<QRegExp, int>(QRegExp("A4[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 370),
  QPair<QRegExp, int>(QRegExp("A5[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 306),
  QPair<QRegExp, int>(QRegExp("A6[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 391),
  QPair<QRegExp, int>(QRegExp("A7[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 376),
  QPair<QRegExp, int>(QRegExp("A8[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 434),
  QPair<QRegExp, int>(QRegExp("A9[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 304),
  QPair<QRegExp, int>(QRegExp("A[A-G][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 291),
  QPair<QRegExp, int>(QRegExp("AH[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 110),
  QPair<QRegExp, int>(QRegExp("A[I-K][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 6),
  QPair<QRegExp, int>(QRegExp("A[M-O][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 281),
  QPair<QRegExp, int>(QRegExp("A[P-R][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 372),
  QPair<QRegExp, int>(QRegExp("AT[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 324),
  QPair<QRegExp, int>(QRegExp("AX[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 150),
  QPair<QRegExp, int>(QRegExp("A[Y-Z][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 100),

  QPair<QRegExp, int>(QRegExp("B[ADGTYZ][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 318),
  QPair<QRegExp, int>(QRegExp("BO[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 386),
  QPair<QRegExp, int>(QRegExp("BS[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 506),
  QPair<QRegExp, int>(QRegExp("BV[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 386),
  QPair<QRegExp, int>(QRegExp("BX[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 386),

  QPair<QRegExp, int>(QRegExp("C2[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 157),
  QPair<QRegExp, int>(QRegExp("C3[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 203),
  QPair<QRegExp, int>(QRegExp("C4[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 215),
  QPair<QRegExp, int>(QRegExp("C5[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 422),
  QPair<QRegExp, int>(QRegExp("C6[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 60),
  QPair<QRegExp, int>(QRegExp("C9[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 181),
  QPair<QRegExp, int>(QRegExp("CE[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 112),
  QPair<QRegExp, int>(QRegExp("C[F-KYZ][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 1),
  QPair<QRegExp, int>(QRegExp("C[LMO][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 70),
  QPair<QRegExp, int>(QRegExp("CN[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 446),
  QPair<QRegExp, int>(QRegExp("CP[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 104),
  QPair<QRegExp, int>(QRegExp("CT[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 272),
  QPair<QRegExp, int>(QRegExp("CU[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 149),
  QPair<QRegExp, int>(QRegExp("C[VWX][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 144),

  QPair<QRegExp, int>(QRegExp("D[23][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 401),
  QPair<QRegExp, int>(QRegExp("D4[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 409),
  QPair<QRegExp, int>(QRegExp("D6[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 411),
  QPair<QRegExp, int>(QRegExp("D7[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 137),
  QPair<QRegExp, int>(QRegExp("D[A-P][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 230),
  QPair<QRegExp, int>(QRegExp("DS[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 137),
  QPair<QRegExp, int>(QRegExp("D[U-Z][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 375),

  QPair<QRegExp, int>(QRegExp("E2[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 387),
  QPair<QRegExp, int>(QRegExp("E3[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 51),
  QPair<QRegExp, int>(QRegExp("E3[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 510),
  QPair<QRegExp, int>(QRegExp("E7[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 501),
  QPair<QRegExp, int>(QRegExp("E[A-H][0-57][0-9A-Z/]+", Qt::CaseInsensitive), 281),
  QPair<QRegExp, int>(QRegExp("E[A-H]6[0-9A-Z/]+", Qt::CaseInsensitive), 21),
  QPair<QRegExp, int>(QRegExp("E[A-H]6[0-9A-Z/]+", Qt::CaseInsensitive), 29),
  QPair<QRegExp, int>(QRegExp("E[A-H]9[0-9A-Z/]+", Qt::CaseInsensitive), 32),
  QPair<QRegExp, int>(QRegExp("E[IJ][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 245),
  QPair<QRegExp, int>(QRegExp("EK[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 14),
  QPair<QRegExp, int>(QRegExp("EL[0-9/][0-9A-Z/]+*", Qt::CaseInsensitive), 434),
  QPair<QRegExp, int>(QRegExp("E[M-O][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 288),
  QPair<QRegExp, int>(QRegExp("EP[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 330),
  QPair<QRegExp, int>(QRegExp("ER[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 179),
  QPair<QRegExp, int>(QRegExp("ES[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 52),
  QPair<QRegExp, int>(QRegExp("ET[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 53),
  QPair<QRegExp, int>(QRegExp("E[U-W][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 27),
  QPair<QRegExp, int>(QRegExp("EX[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 135),
  QPair<QRegExp, int>(QRegExp("EY[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 262),
  QPair<QRegExp, int>(QRegExp("EZ[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 280),

  QPair<QRegExp, int>(QRegExp("F[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 227),
  QPair<QRegExp, int>(QRegExp("FG[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 79),
  QPair<QRegExp, int>(QRegExp("FH[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 169),
  QPair<QRegExp, int>(QRegExp("FJ[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 516),
  QPair<QRegExp, int>(QRegExp("FK[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 162),
  QPair<QRegExp, int>(QRegExp("FM[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 84),
  QPair<QRegExp, int>(QRegExp("FO[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 175),
  QPair<QRegExp, int>(QRegExp("FP[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 277),
  QPair<QRegExp, int>(QRegExp("FR[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 453),
  QPair<QRegExp, int>(QRegExp("FS[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 213),
  QPair<QRegExp, int>(QRegExp("FT[0-9]W[0-9A-Z/]+", Qt::CaseInsensitive), 41),
  QPair<QRegExp, int>(QRegExp("FT[0-9]X[0-9A-Z/]+", Qt::CaseInsensitive), 131),
  QPair<QRegExp, int>(QRegExp("FT[0-9]Z[0-9A-Z/]+", Qt::CaseInsensitive), 10),
  QPair<QRegExp, int>(QRegExp("FW[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 298),
  QPair<QRegExp, int>(QRegExp("FY[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 63),

  QPair<QRegExp, int>(QRegExp("[GM]X?[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 223),
  QPair<QRegExp, int>(QRegExp("2E[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 223),
  QPair<QRegExp, int>(QRegExp("[GM]B[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 223),
  QPair<QRegExp, int>(QRegExp("[2GM][DT][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 114),
  QPair<QRegExp, int>(QRegExp("[2GM][IN][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 265),
  QPair<QRegExp, int>(QRegExp("[2GM][JH][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 122),
  QPair<QRegExp, int>(QRegExp("[2GM][MS][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 279),
  QPair<QRegExp, int>(QRegExp("[2GM][UP][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 106),
  QPair<QRegExp, int>(QRegExp("[2GM][WC][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 294),

  QPair<QRegExp, int>(QRegExp("H2[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 215),
  QPair<QRegExp, int>(QRegExp("H[389][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 88),
  QPair<QRegExp, int>(QRegExp("H4[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 185),
  QPair<QRegExp, int>(QRegExp("H5[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 462),
  QPair<QRegExp, int>(QRegExp("H[67][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 86),
  QPair<QRegExp, int>(QRegExp("H[AG][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 239),
  QPair<QRegExp, int>(QRegExp("HB0[0-9A-Z/]+", Qt::CaseInsensitive), 251),
  QPair<QRegExp, int>(QRegExp("HB[1-9][0-9A-Z/]+", Qt::CaseInsensitive), 287),
  QPair<QRegExp, int>(QRegExp("H[CD][0-79][0-9A-Z/]+", Qt::CaseInsensitive), 120),
  QPair<QRegExp, int>(QRegExp("H[CD]8[0-9A-Z/]+", Qt::CaseInsensitive), 71),
  QPair<QRegExp, int>(QRegExp("HE[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 287),
  QPair<QRegExp, int>(QRegExp("HF[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 269),
  QPair<QRegExp, int>(QRegExp("HH[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 78),
  QPair<QRegExp, int>(QRegExp("HI[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 72),
  QPair<QRegExp, int>(QRegExp("H[KJ][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 116),
  QPair<QRegExp, int>(QRegExp("HL[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 137),
  QPair<QRegExp, int>(QRegExp("H[OP][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 88),
  QPair<QRegExp, int>(QRegExp("H[RQ][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 80),
  QPair<QRegExp, int>(QRegExp("HS[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 387),
  QPair<QRegExp, int>(QRegExp("HT[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 86),
  QPair<QRegExp, int>(QRegExp("HU[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 74),
  QPair<QRegExp, int>(QRegExp("HV[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 295),
  QPair<QRegExp, int>(QRegExp("HZ[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 378),

  QPair<QRegExp, int>(QRegExp("I[SM]0[0-9A-Z/]+", Qt::CaseInsensitive), 225),
  QPair<QRegExp, int>(QRegExp("I[A-Z]?[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 248),

  QPair<QRegExp, int>(QRegExp("J2[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 382),
  QPair<QRegExp, int>(QRegExp("J3[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 77),
  QPair<QRegExp, int>(QRegExp("J4[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 236),
  QPair<QRegExp, int>(QRegExp("J5[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 109),
  QPair<QRegExp, int>(QRegExp("J6[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 97),
  QPair<QRegExp, int>(QRegExp("J7[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 95),
  QPair<QRegExp, int>(QRegExp("J8[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 98),
  QPair<QRegExp, int>(QRegExp("J[AE-S][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 339),
  QPair<QRegExp, int>(QRegExp("JD[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 177),
  QPair<QRegExp, int>(QRegExp("J[TUV][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 363),
  QPair<QRegExp, int>(QRegExp("JW[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 259),
  QPair<QRegExp, int>(QRegExp("JX[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 118),
  QPair<QRegExp, int>(QRegExp("JY[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 342),

  QPair<QRegExp, int>(QRegExp("[KNW][A-GI-KM-OQ-Z]?[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 291),
  QPair<QRegExp, int>(QRegExp("[KNW]H[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 110),
  QPair<QRegExp, int>(QRegExp("[KNW]L[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 6),
  QPair<QRegExp, int>(QRegExp("[KNW]P[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 297),

  QPair<QRegExp, int>(QRegExp("L[2-9][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 100),
  QPair<QRegExp, int>(QRegExp("L[ABCGIJN][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 266),
  QPair<QRegExp, int>(QRegExp("L[UO-TVW][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 100),
  QPair<QRegExp, int>(QRegExp("LX[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 254),
  QPair<QRegExp, int>(QRegExp("LY[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 146),
  QPair<QRegExp, int>(QRegExp("LZ[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 212),

  QPair<QRegExp, int>(QRegExp("O[ABC][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 136),
  QPair<QRegExp, int>(QRegExp("OD[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 354),
  QPair<QRegExp, int>(QRegExp("OE[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 206),
  QPair<QRegExp, int>(QRegExp("O[F-I][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 224),
  QPair<QRegExp, int>(QRegExp("O[KL][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 503),
  QPair<QRegExp, int>(QRegExp("OM[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 504),
  QPair<QRegExp, int>(QRegExp("O[N-T][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 209),
  QPair<QRegExp, int>(QRegExp("OX[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 237),
  QPair<QRegExp, int>(QRegExp("OY[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 222),
  QPair<QRegExp, int>(QRegExp("O[U-WZ][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 221),

  QPair<QRegExp, int>(QRegExp("P2[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 163),
  QPair<QRegExp, int>(QRegExp("P3[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 215),
  QPair<QRegExp, int>(QRegExp("P4[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 91),
  QPair<QRegExp, int>(QRegExp("P5[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 344),
  QPair<QRegExp, int>(QRegExp("P[A-I][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 263),
  QPair<QRegExp, int>(QRegExp("PJ[1249][0-9A-Z/]+", Qt::CaseInsensitive), 517),
  QPair<QRegExp, int>(QRegExp("PJ[5678][0-9A-Z/]+", Qt::CaseInsensitive), 518),
  QPair<QRegExp, int>(QRegExp("P[P-X][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 108),
  QPair<QRegExp, int>(QRegExp("PZ[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 140),

  QPair<QRegExp, int>(QRegExp("R1A[0-9A-Z/]+", Qt::CaseInsensitive), 13),
  QPair<QRegExp, int>(QRegExp("R1F[0-9A-Z/]+", Qt::CaseInsensitive), 61),
  QPair<QRegExp, int>(QRegExp("R1M[0-9A-Z/]+", Qt::CaseInsensitive), 151),
  QPair<QRegExp, int>(QRegExp("R[A-Z]?[134567][0-9A-Z/]+", Qt::CaseInsensitive), 54),
  QPair<QRegExp, int>(QRegExp("R[A-Z]?2[0-9A-Z/]+", Qt::CaseInsensitive), 126),
  QPair<QRegExp, int>(QRegExp("R[A-Z]?[089][0-9A-Z/]+", Qt::CaseInsensitive), 15),

  QPair<QRegExp, int>(QRegExp("S0[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 302),
  QPair<QRegExp, int>(QRegExp("S2[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 305),
  QPair<QRegExp, int>(QRegExp("S4[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 462),
  QPair<QRegExp, int>(QRegExp("S5[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 499),
  QPair<QRegExp, int>(QRegExp("S6[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 381),
  QPair<QRegExp, int>(QRegExp("S7[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 379),
  QPair<QRegExp, int>(QRegExp("S8[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 462),
  QPair<QRegExp, int>(QRegExp("S9[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 219),
  QPair<QRegExp, int>(QRegExp("S[A-M][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 284),
  QPair<QRegExp, int>(QRegExp("S[N-R][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 269),
  QPair<QRegExp, int>(QRegExp("ST[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 466),
  QPair<QRegExp, int>(QRegExp("SU[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 478),
  QPair<QRegExp, int>(QRegExp("S[VXYZ][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 236),

  QPair<QRegExp, int>(QRegExp("T2[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 282),
  QPair<QRegExp, int>(QRegExp("T3[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 301),
  QPair<QRegExp, int>(QRegExp("T4[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 70),
  QPair<QRegExp, int>(QRegExp("T5[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 232),
  QPair<QRegExp, int>(QRegExp("T6[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 3),
  QPair<QRegExp, int>(QRegExp("T7[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 278),
  QPair<QRegExp, int>(QRegExp("T9[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 501),
  QPair<QRegExp, int>(QRegExp("TA[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 390),
  QPair<QRegExp, int>(QRegExp("T[DG][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 76),
  QPair<QRegExp, int>(QRegExp("T[EI][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 308),
  QPair<QRegExp, int>(QRegExp("TF[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 242),
  QPair<QRegExp, int>(QRegExp("TG[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 76),
  QPair<QRegExp, int>(QRegExp("TJ[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 406),
  QPair<QRegExp, int>(QRegExp("TK[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 214),
  QPair<QRegExp, int>(QRegExp("TL[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 408),
  QPair<QRegExp, int>(QRegExp("T[MOPX][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 227),
  QPair<QRegExp, int>(QRegExp("TN[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 412),
  QPair<QRegExp, int>(QRegExp("TR[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 420),
  QPair<QRegExp, int>(QRegExp("TT[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 410),
  QPair<QRegExp, int>(QRegExp("TU[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 428),
  QPair<QRegExp, int>(QRegExp("TX[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 416),
  QPair<QRegExp, int>(QRegExp("TZ[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 428),

  QPair<QRegExp, int>(QRegExp("U[A-I]?[134567]+[0-9A-Z/]+", Qt::CaseInsensitive), 54),
  QPair<QRegExp, int>(QRegExp("U[A-I]?2[0-9A-Z/]+", Qt::CaseInsensitive), 126),
  QPair<QRegExp, int>(QRegExp("U[A-I]?[089][0-9A-Z/]+", Qt::CaseInsensitive), 15),
  QPair<QRegExp, int>(QRegExp("U[JKM][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 292),
  QPair<QRegExp, int>(QRegExp("U[NPQ][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 130),
  QPair<QRegExp, int>(QRegExp("U[R-Z][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 288),

  QPair<QRegExp, int>(QRegExp("V2[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 94),
  QPair<QRegExp, int>(QRegExp("V3[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 66),
  QPair<QRegExp, int>(QRegExp("V4[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 249),
  QPair<QRegExp, int>(QRegExp("V5[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 464),
  QPair<QRegExp, int>(QRegExp("V6[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 173),
  QPair<QRegExp, int>(QRegExp("V7[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 168),
  QPair<QRegExp, int>(QRegExp("V8[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 345),
  QPair<QRegExp, int>(QRegExp("V9[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 462),
  QPair<QRegExp, int>(QRegExp("V[A-GO][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 1),
  QPair<QRegExp, int>(QRegExp("V[IK][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 150),
  QPair<QRegExp, int>(QRegExp("VP[0-8][0-9A-Z/]+", Qt::CaseInsensitive), 223),
  QPair<QRegExp, int>(QRegExp("VP9[0-9A-Z/]+", Qt::CaseInsensitive), 64),
  QPair<QRegExp, int>(QRegExp("VQ9[0-9A-Z/]+", Qt::CaseInsensitive), 33),
  QPair<QRegExp, int>(QRegExp("VR2[0-9A-Z/]+", Qt::CaseInsensitive), 321),
  QPair<QRegExp, int>(QRegExp("VU[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 324),
  QPair<QRegExp, int>(QRegExp("V[XY][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 1),

  QPair<QRegExp, int>(QRegExp("X[B-H][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 50),
  QPair<QRegExp, int>(QRegExp("X[J-O][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 1),
  QPair<QRegExp, int>(QRegExp("X[RQ][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 112),
  QPair<QRegExp, int>(QRegExp("XT[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 480),
  QPair<QRegExp, int>(QRegExp("XU[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 312),
  QPair<QRegExp, int>(QRegExp("XV[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 293),
  QPair<QRegExp, int>(QRegExp("XW[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 143),
  QPair<QRegExp, int>(QRegExp("XX9[0-9A-Z/]+", Qt::CaseInsensitive), 152),
  QPair<QRegExp, int>(QRegExp("X[YZ][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 309),

  QPair<QRegExp, int>(QRegExp("YA[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 3),
  QPair<QRegExp, int>(QRegExp("Y[BCE-H][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 327),
  QPair<QRegExp, int>(QRegExp("YI[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 333),
  QPair<QRegExp, int>(QRegExp("YJ[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 158),
  QPair<QRegExp, int>(QRegExp("YK[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 384),
  QPair<QRegExp, int>(QRegExp("YL[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 145),
  QPair<QRegExp, int>(QRegExp("YM[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 390),
  QPair<QRegExp, int>(QRegExp("YN[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 86),
  QPair<QRegExp, int>(QRegExp("Y[O-R][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 275),
  QPair<QRegExp, int>(QRegExp("YS[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 74),
  QPair<QRegExp, int>(QRegExp("Y[UT][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 296),
  QPair<QRegExp, int>(QRegExp("Y[V-Y][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 148),

  QPair<QRegExp, int>(QRegExp("Z2[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 452),
  QPair<QRegExp, int>(QRegExp("Z3[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 502),
  QPair<QRegExp, int>(QRegExp("ZA[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 7),
  QPair<QRegExp, int>(QRegExp("Z[BG][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 233),
  QPair<QRegExp, int>(QRegExp("ZC[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 283),
  QPair<QRegExp, int>(QRegExp("ZD7[0-9A-Z/]+", Qt::CaseInsensitive), 250),
  QPair<QRegExp, int>(QRegExp("ZD8[0-9A-Z/]+", Qt::CaseInsensitive), 205),
  QPair<QRegExp, int>(QRegExp("ZD9[0-9A-Z/]+", Qt::CaseInsensitive), 274),
  QPair<QRegExp, int>(QRegExp("ZF[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 69),
  QPair<QRegExp, int>(QRegExp("ZK1[0-9A-Z/]+", Qt::CaseInsensitive), 191),
  QPair<QRegExp, int>(QRegExp("ZK[29][0-9A-Z/]+", Qt::CaseInsensitive), 188),
  QPair<QRegExp, int>(QRegExp("ZK3[0-9A-Z/]+", Qt::CaseInsensitive), 270),
  QPair<QRegExp, int>(QRegExp("Z[LM][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 170),
  QPair<QRegExp, int>(QRegExp("ZP[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 132),
  QPair<QRegExp, int>(QRegExp("Z[RSU][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 462),
  QPair<QRegExp, int>(QRegExp("Z[V-Z][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 108),

  QPair<QRegExp, int>(QRegExp("1S[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 247),

  QPair<QRegExp, int>(QRegExp("3A[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 260),
  QPair<QRegExp, int>(QRegExp("3B[6-7][0-9A-Z/]+", Qt::CaseInsensitive), 4),
  QPair<QRegExp, int>(QRegExp("3B8[0-9A-Z/]+", Qt::CaseInsensitive), 165),
  QPair<QRegExp, int>(QRegExp("3B9[0-9A-Z/]+", Qt::CaseInsensitive), 207),
  QPair<QRegExp, int>(QRegExp("3C[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 49),
  QPair<QRegExp, int>(QRegExp("3D2[0-9A-Z/]+", Qt::CaseInsensitive), 176),
  QPair<QRegExp, int>(QRegExp("3DA0[0-9A-Z/]+", Qt::CaseInsensitive), 468),
  QPair<QRegExp, int>(QRegExp("3[EF][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 88),
  QPair<QRegExp, int>(QRegExp("3G[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 112),
  QPair<QRegExp, int>(QRegExp("3V[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 474),
  QPair<QRegExp, int>(QRegExp("3W[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 293),
  QPair<QRegExp, int>(QRegExp("3X[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 107),
  QPair<QRegExp, int>(QRegExp("3Y[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 24),
  QPair<QRegExp, int>(QRegExp("3Z[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 269),

  QPair<QRegExp, int>(QRegExp("4[A-C][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 50),
  QPair<QRegExp, int>(QRegExp("4[DI][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 375),
  QPair<QRegExp, int>(QRegExp("4[JK][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 18),
  QPair<QRegExp, int>(QRegExp("4L[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 75),
  QPair<QRegExp, int>(QRegExp("4M[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 148),
  QPair<QRegExp, int>(QRegExp("4N5[0-9A-Z/]+", Qt::CaseInsensitive), 502),
  QPair<QRegExp, int>(QRegExp("4S[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 315),
  QPair<QRegExp, int>(QRegExp("4T[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 136),
  QPair<QRegExp, int>(QRegExp("4U[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 289),
  QPair<QRegExp, int>(QRegExp("4V[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 78),
  QPair<QRegExp, int>(QRegExp("4W[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 511),
  QPair<QRegExp, int>(QRegExp("4[XZ][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 336),

  QPair<QRegExp, int>(QRegExp("5A[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 436),
  QPair<QRegExp, int>(QRegExp("5B[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 215),
  QPair<QRegExp, int>(QRegExp("5C[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 446),
  QPair<QRegExp, int>(QRegExp("5H[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 470),
  QPair<QRegExp, int>(QRegExp("5[JK][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 116),
  QPair<QRegExp, int>(QRegExp("5L[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 434),
  QPair<QRegExp, int>(QRegExp("5N[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 450),
  QPair<QRegExp, int>(QRegExp("5P[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 221),
  QPair<QRegExp, int>(QRegExp("5R[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 438),
  QPair<QRegExp, int>(QRegExp("5T[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 444),
  QPair<QRegExp, int>(QRegExp("5U[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 187),
  QPair<QRegExp, int>(QRegExp("5V[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 483),
  QPair<QRegExp, int>(QRegExp("5W[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 190),
  QPair<QRegExp, int>(QRegExp("5X[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 286),
  QPair<QRegExp, int>(QRegExp("5[YZ][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 430),

  QPair<QRegExp, int>(QRegExp("6C[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 384),
  QPair<QRegExp, int>(QRegExp("6[D-J][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 50),
  QPair<QRegExp, int>(QRegExp("6[KL][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 137),
  QPair<QRegExp, int>(QRegExp("6O[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 232),
  QPair<QRegExp, int>(QRegExp("6P[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 372),
  QPair<QRegExp, int>(QRegExp("6[TU][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 466),
  QPair<QRegExp, int>(QRegExp("6[VW][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 456),
  QPair<QRegExp, int>(QRegExp("6Y[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 82),

  QPair<QRegExp, int>(QRegExp("7[J-N][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 339),
  QPair<QRegExp, int>(QRegExp("7O[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 492),
  QPair<QRegExp, int>(QRegExp("7P[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 432),
  QPair<QRegExp, int>(QRegExp("7Q[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 440),
  QPair<QRegExp, int>(QRegExp("7S[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 284),
  QPair<QRegExp, int>(QRegExp("7[XW][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 400),
  QPair<QRegExp, int>(QRegExp("7Z[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 378),

  QPair<QRegExp, int>(QRegExp("8[ABEI][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 327),
  QPair<QRegExp, int>(QRegExp("8J[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 339),
  QPair<QRegExp, int>(QRegExp("8O[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 402),
  QPair<QRegExp, int>(QRegExp("8P[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 62),
  QPair<QRegExp, int>(QRegExp("8Q[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 159),
  QPair<QRegExp, int>(QRegExp("8R[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 129),
  QPair<QRegExp, int>(QRegExp("8S[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 284),

  QPair<QRegExp, int>(QRegExp("9A[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 497),
  QPair<QRegExp, int>(QRegExp("9G[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 424),
  QPair<QRegExp, int>(QRegExp("9H[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 257),
  QPair<QRegExp, int>(QRegExp("9[IJ][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 482),
  QPair<QRegExp, int>(QRegExp("9K[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 348),
  QPair<QRegExp, int>(QRegExp("9K[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 458),
  QPair<QRegExp, int>(QRegExp("9M[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 46),
  QPair<QRegExp, int>(QRegExp("9N[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 369),
  QPair<QRegExp, int>(QRegExp("9[RQ][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 414),
  QPair<QRegExp, int>(QRegExp("9U[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 404),
  QPair<QRegExp, int>(QRegExp("9V[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 381),
  QPair<QRegExp, int>(QRegExp("9W[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 299),
  QPair<QRegExp, int>(QRegExp("9X[0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 454),
  QPair<QRegExp, int>(QRegExp("9[YZ][0-9/][0-9A-Z/]+", Qt::CaseInsensitive), 90)
};

static QHash<int, QString> _dxcc_name_table(
{ {1, "Canada"}, {3, "Afghanistan"}, {4, "Agalega & St Brandon"}, {5, "Aland Is"}, {6, "Alaska"},
  {7, "ALBANIA"}, {9, "AMERICAN SAMOA"}, {10, "AMSTERDAM & ST PAUL"},
  {11, "ANDAMAN & NICOBAR IS"}, {12, "ANGUILLA"}, {13, "ANTARCTICA"}, {14, "ARMENIA"},
  {15, "ASIATIC RUSSIA"}, {16, "AUCKLAND & CAMPBELL"},  {17, "AVES ISLAND"}, {18, "AZERBAIJAN"},
  {20, "BAKER, HOWLAND IS"}, {21, "BALEARIC IS"}, {22, "PALAU"}, {24, "BOUVET"}, {27, "BELARUS"},
  {29, "CANARY IS"}, {31, "C KIRIBATI"}, {32, "CEUTA & MELILLA"}, {33, "CHAGOS"},
  {34, "CHATHAM IS"}, {35, "CHRISTMAS IS"}, {36, "CLIPPERTON IS"},  {37, "COCOS ISLAND"},
  {38, "COCOS-KEELING IS"}, {40, "CRETE"}, {41, "CROZET"}, {43, "DESECHEO IS"},
  {45, "DODECANESE"}, {46, "EAST MALAYSIA"}, {47, "EASTER IS"}, {48, "EASTERN KIRIBATI"},
  {49, "EQUATORIAL GUINEA"}, {50, "MEXICO"}, {51, "ERITREA"}, {52, "ESTONIA"}, {53, "ETHIOPIA"},
  {54, "EUROPEAN RUSSIA"}, {56, "FERNANDO DE NORONHA"}, {60, "BAHAMAS"},
  {61, "FRANZ JOSEF LAND"}, {62, "BARBADOS"}, {63, "FRENCH GUIANA"}, {64, "BERMUDA"},
  {65, "BRITISH VIRGIN IS"}, {66, "BELIZE"}, {69, "CAYMAN ISLANDS"}, {70, "CUBA"},
  {71, "GALAPAGOS"}, {72, "DOMINICAN REPUBLIC"}, {74, "EL SALVADOR"}, {75, "GEORGIA"},
  {76, "GUATEMALA"}, {77, "GRENADA"}, {78, "HAITI"}, {79, "GUADELOUPE"}, {80, "HONDURAS"},
  {82, "JAMAICA"}, {84, "MARTINIQUE"}, {86, "NICARAGUA"}, {88, "PANAMA"}, {89, "TURKS & CAICOS IS"},
  {90, "TRINIDAD & TOBAGO"}, {91, "ARUBA"}, {94, "ANTIGUA & BARBUDA"}, {95, "DOMINICA"},
  {96, "MONTSERRAT"}, {97, "ST LUCIA"}, {98, "ST VINCENT"}, {99, "GLORIOSO IS"},
  {100, "ARGENTINA"}, {103, "GUAM"},  {104, "BOLIVIA"}, {105, "GUANTANAMO BAY"}, {106, "GUERNSEY"},
  {107, "GUINEA"}, {108, "BRAZIL"}, {109, "GUINEA-BISSAU"}, {110, "HAWAII"}, {111, "HEARD IS"},
  {112, "CHILE"}, {114, "ISLE OF MAN"}, {116, "COLOMBIA"}, {117, "ITU HQ"}, {118, "JAN MAYEN"},
  {120, "ECUADOR"}, {122, "JERSEY"}, {123, "JOHNSTON IS"}, {124, "JUAN DE NOVA"},
  {125, "JUAN FERNANDEZ"}, {126, "KALININGRAD"}, {129, "GUYANA"}, {130, "KAZAKHSTAN"},
  {131, "KERGUELEN"}, {132, "PARAGUAY"}, {133, "KERMADEC"}, {134, "KINGMAN REEF"},
  {135, "KYRGYZSTAN"}, {136, "PERU"}, {137, "REPUBLIC OF KOREA"}, {138, "KURE ISLAND"},
  {140, "SURINAME"}, {141, "FALKLAND IS"}, {142, "LAKSHADWEEP ISLANDS"}, {143, "LAOS"},
  {144, "URUGUAY"}, {145, "LATVIA"}, {146, "LITHUANIA"}, {147, "LORD HOWE IS"}, {148, "VENEZUELA"},
  {149, "AZORES"}, {150, "AUSTRALIA"}, {152, "MACAO"}, {153, "MACQUARIE IS"}, {157, "NAURU"},
  {158, "VANUATU"}, {159, "MALDIVES"}, {160, "TONGA"}, {161, "MALPELO IS"}, {162, "NEW CALEDONIA"},
  {163, "PAPUA NEW GUINEA"}, {165, "MAURITIUS IS"}, {166, "MARIANA IS"}, {167, "MARKET REEF"},
  {168, "MARSHALL IS"}, {169, "MAYOTTE"}, {170, "NEW ZEALAND"}, {171, "MELLISH REEF"},
  {172, "PITCAIRN IS"}, {173, "MICRONESIA"},  {174, "MIDWAY IS"}, {175, "FRENCH POLYNESIA"},
  {176, "FIJI"}, {177, "MINAMI TORISHIMA"}, {179, "MOLDOVA"}, {180, "MOUNT ATHOS"},
  {181, "MOZAMBIQUE"}, {182, "NAVASSA IS"}, {185, "SOLOMON ISLANDS"}, {187, "NIGER"}, {188, "NIUE"},
  {189, "NORFOLK IS"}, {190, "SAMOA"}, {191, "N COOK IS"}, {192, "OGASAWARA"}, {195, "ANNOBON I."},
  {197, "PALMYRA & JARVIS IS"}, {199, "PETER I IS"}, {201, "PRINCE EDWARD & MARION"},
  {202, "PUERTO RICO"}, {203, "ANDORRA"}, {204, "REVILLAGIGEDO"}, {205, "ASCENSION ISLAND"},
  {206, "AUSTRIA"}, {207, "RODRIGUEZ IS"}, {209, "BELGIUM"}, {211, "SABLE ISLAND"},
  {212, "BULGARIA"}, {213, "SAINT MARTIN"}, {214, "CORSICA"}, {215, "CYPRUS"},
  {216, "SAN ANDRES & PROVIDENCIA"}, {217, "SAN FELIX"}, {219, "SAO TOME & PRINCIPE"},
  {221, "DENMARK"}, {222, "FAROE IS"}, {223, "ENGLAND"}, {224, "FINLAND"}, {225, "SARDINIA"},
  {227, "FRANCE"}, {230, "FED REP OF GERMANY"}, {232, "SOMALIA"}, {233, "GIBRALTAR"},
  {234, "S COOK IS"}, {235, "SOUTH GEORGIA IS"}, {236, "GREECE"}, {237, "GREENLAND"},
  {238, "SOUTH ORKNEY IS"}, {239, "HUNGARY"}, {240, "SOUTH SANDWICH ISLANDS"},
  {241, "SOUTH SHETLAND ISLANDS"}, {242, "ICELAND"}, {245, "IRELAND"},
  {246, "SOV MILITARY ORDER OF MALTA"}, {247, "SPRATLY IS"}, {248, "ITALY"},
  {249, "ST KITTS & NEVIS"}, {250, "ST HELENA IS"}, {251, "LIECHTENSTEIN"},
  {252, "ST PAUL ISLAND"}, {253, "ST. PETER & ST. PAUL ROCKS"}, {254, "LUXEMBOURG"},
  {256, "MADEIRA IS"}, {257, "MALTA"}, {259, "SVALBARD IS"}, {260, "MONACO"}, {262, "TAJIKISTAN"},
  {263, "NETHERLANDS"}, {265, "NORTHERN IRELAND"}, {266, "NORWAY"}, {269, "POLAND"},
  {270, "TOKELAU IS"}, {272, "PORTUGAL"}, {273, "TRINDADE & MARTIN VAZ ISLANDS"},
  {274, "TRISTAN DA CUNHA & GOUGH IS"}, {275, "ROMANIA"}, {276, "TROMELIN"},
  {277, "ST PIERRE & MIQUELON"}, {278, "SAN MARINO"}, {279, "SCOTLAND"}, {280, "TURKMENISTAN"},
  {281, "SPAIN"}, {282, "TUVALU"}, {283, "UK BASES ON CYPRUS"}, {284, "SWEDEN"},
  {285, "US VIRGIN ISLANDS"}, {286, "UGANDA"}, {287, "SWITZERLAND"}, {288, "UKRAINE"},
  {289, "UNITED NATIONS HQ"}, {291, "UNITED STATES"}, {292, "UZBEKISTAN"}, {293, "VIETNAM"},
  {294, "WALES"}, {295, "VATICAN"}, {296, "SERBIA"}, {297, "WAKE IS"}, {298, "WALLIS & FUTUNA"},
  {299, "WEST MALAYSIA"}, {301, "W KIRIBATI"}, {302, "WESTERN SAHARA"}, {303, "WILLIS IS"},
  {304, "BAHRAIN"}, {305, "BANGLADESH"}, {306, "BHUTAN"}, {308, "COSTA RICA"}, {309, "MYANMAR"},
  {312, "CAMBODIA"}, {315, "SRI LANKA"}, {318, "CHINA"}, {321, "HONG KONG"}, {324, "INDIA"},
  {327, "INDONESIA"}, {330, "IRAN"}, {333, "IRAQ"}, {336, "ISRAEL"}, {339, "JAPAN"},
  {342, "JORDAN"}, {344, "DEMOCRATIC PEOPLE'S REPUBLIC OF KOREA"}, {345, "BRUNEI"},
  {348, "KUWAIT"}, {354, "LEBANON"}, {363, "MONGOLIA"}, {369, "NEPAL"}, {370, "OMAN"},
  {372, "PAKISTAN"}, {375, "PHILIPPINES"}, {376, "QATAR"}, {378, "SAUDI ARABIA"},
  {379, "SEYCHELLES"}, {381, "SINGAPORE"}, {382, "DJIBOUTI"}, {384, "SYRIA"}, {386, "TAIWAN"},
  {387, "THAILAND"}, {390, "TURKEY"}, {391, "UNITED ARAB EMIRATES"}, {400, "ALGERIA"},
  {401, "ANGOLA"}, {402, "BOTSWANA"}, {404, "BURUNDI"}, {406, "CAMEROON"},
  {408, "CENTRAL AFRICAN REPUBLIC"}, {409, "CAPE VERDE"}, {410, "CHAD"}, {411, "COMOROS"},
  {412, "REPUBLIC OF THE CONGO"}, {414, "DEM. REPUBLIC OF THE CONGO"}, {416, "BENIN"},
  {420, "GABON"}, {422, "THE GAMBIA"}, {424, "GHANA"}, {428, "COTE D'IVOIRE"}, {430, "KENYA"},
  {432, "LESOTHO"}, {434, "LIBERIA"}, {436, "LIBYA"}, {438, "MADAGASCAR"}, {440, "MALAWI"},
  {442, "MALI"}, {444, "MAURITANIA"}, {446, "MOROCCO"}, {450, "NIGERIA"}, {452, "ZIMBABWE"},
  {453, "REUNION"}, {454, "RWANDA"}, {456, "SENEGAL"}, {458, "SIERRA LEONE"}, {460, "ROTUMA IS"},
  {462, "REPUBLIC OF SOUTH AFRICA"}, {464, "NAMIBIA"}, {466, "SUDAN"}, {468, "SWAZILAND"},
  {470, "TANZANIA"}, {474, "TUNISIA"}, {478, "EGYPT"}, {480, "BURKINA-FASO"}, {482, "ZAMBIA"},
  {483, "TOGO"}, {489, "CONWAY REEF"}, {490, "BANABA ISLAND"}, {492, "YEMEN"}, {497, "CROATIA"},
  {499, "SLOVENIA"}, {501, "BOSNIA-HERZEGOVINA"}, {502, "MACEDONIA"}, {503, "CZECH REPUBLIC"},
  {504, "SLOVAK REPUBLIC"}, {505, "PRATAS IS"}, {506, "SCARBOROUGH REEF"}, {507, "TEMOTU PROVINCE"},
  {508, "AUSTRAL IS"}, {509, "MARQUESAS IS"}, {510, "PALESTINE"}, {511, "TIMOR-LESTE"},
  {512, "CHESTERFIELD IS"}, {513, "DUCIE IS"}, {514, "MONTENEGRO"}, {515, "SWAINS ISLAND"},
  {516, "ST. BARTHELEMY"}, {517, "CURACAO"}, {518, "SINT MAARTEN"}, {519, "ST EUSTATIUS AND SABA"},
  {520, "BONAIRE"}, {521, "SOUTH SUDAN"} });

int dxcc_from_call(const QString &call) {
  QVector< QPair<QRegExp,int> >::const_iterator rule = _dxcc_table.begin();
  for (; rule != _dxcc_table.end(); rule++) {
    if (rule->first.exactMatch(call))
      return rule->second;
  }
  return -1;
}

QString dxcc_name_from_call(const QString &call) {
  QVector< QPair<QRegExp,int> >::const_iterator rule = _dxcc_table.begin();
  for (; rule != _dxcc_table.end(); rule++) {
    if (rule->first.exactMatch(call))
      return _dxcc_name_table.value(rule->second, "Unknown DXCC");
  }
  return "Unknown DXCC";
}

QString dxcc_name(int id) {
  return _dxcc_name_table.value(id, "Unknown DXCC");
}
